@page "/login"
@using DesafioDiaDoRock.ApplicationCore.DTO.UserDTO
@using System.Text.Json
@using DesafioDiaDoRock.UI.Services
@layout LoginLayout
@inject IUserService userService;
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILoginService loginService
@inject AuthenticationService authenticationService
<PageTitle>Login</PageTitle>



<div class="area-login-background d-none d-md-block">
    <img src="photo-1506157786151-b8491531f063.jpeg" />
</div>

<div class="area-form">
    <form @onsubmit="HandleLogin">
        <h1 class="titulo">Rock Day</h1>
        <h2 class="subtitulo">The place where rock never stops!</h2>

        <input class="input-form" type="email" placeholder="Enter your email" @bind="email" required>
        <input class="input-form" type="password" placeholder="Enter your password" @bind="password" required>
        <button type="submit" class="button-primary" >Login</button>
        <button type="button" class="button-primary" @onclick="HandleLoginAdmin">Login Admin</button>

        <p class="error-message-response">@errorMessage</p>

        <p >Don't have an account ? <a href="signup">SignUp</a></p>
    </form>
</div>



@code {
    private string? email;
    private string? password;
    private string? errorMessage;
    private string? token;


    private async Task HandleLogin()
    {
        var loginDTO = new LoginDTO
        {
            Email = email,
            Password = password
        };

        var response = await userService.Login(loginDTO);

        if (response.IsSuccess)
        {
            var jsonString = response.Data.ToString();
            var loginResponse = JsonSerializer.Deserialize<LoginResponse>(jsonString);

            authenticationService.UpdateAuthenticationState(loginResponse.token);
            if (!loginService.IsNecessaryAuthenticated)
                Navigation.NavigateTo("/", forceLoad: true);

            loginService.ToggleAuthentication();
            StateHasChanged();




        }
        else
            errorMessage = response.Message;
    }

    private async Task HandleLoginAdmin()
    {
        var loginDTO = new LoginDTO
            {
                Email = "admin@example.com",
                Password = "1234567890"
            };

        var response = await userService.Login(loginDTO);

        if (response.IsSuccess)
        {
            var jsonString = response.Data.ToString();
            var loginResponse = JsonSerializer.Deserialize<LoginResponse>(jsonString);

            authenticationService.UpdateAuthenticationState(loginResponse.token);

            // var jsInterop = new JsInterop(JSRuntime);
            // await jsInterop.SetToken(loginResponse.token);

            loginService.ToggleAuthentication();
            StateHasChanged();
            Navigation.NavigateTo("/", forceLoad: true);
        }
        else
            errorMessage = response.Message;
    }


    private class LoginResponse
    {
        public string token { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        loginService.OnAuthenticationChanged += OnAuthenticationChanged;
    }

    private void OnAuthenticationChanged(bool isDarkMode)
    {
        StateHasChanged();
    }
}


